language: cpp
compiler:
  - clang
  - gcc
os:
  - osx
  - linux
env:
  - CONFIG=Release
  - CONFIG=Debug
matrix:
  exclude:
  - os: osx
    compiler: gcc
  - os: linux
    compiler: clang
cache:
  directories:
    $HOME/deps-release
    $HOME/deps-debug
before_install:
  - if [ $CC = gcc ]; then export CXX="g++-5" CC="gcc-5"; fi
  - if [ $TRAVIS_OS_NAME = 'linux' -a $CC = 'clang' ]; then export CXX="clang++-3.7" CC="clang-3.7"; fi
  - $CC -v
  - if [ $TRAVIS_OS_NAME = 'linux' ]; then export INSTPRF=$HOME/p; mkdir -p $INSTPRF; fi
  - "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew update; fi"
  - "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew tap homebrew/science; fi"
  - "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew tap osvr/osvr; fi"
  - "if [ $TRAVIS_OS_NAME = 'linux' ]; then
      pushd $HOME;
      if [ $CONFIG = 'Release' ]; then
        mkdir -p deps-release;
        cd deps-release;
      else
        mkdir -p deps-debug;
        cd deps-debug;
      fi;
      if [ -d jsoncpp ]; then
        pushd jsoncpp;
        git pull;
        popd;
      else
        git clone https://github.com/open-source-parsers/jsoncpp.git;
      fi;
      if [ -d libfunctionality ]; then
        pushd libfunctionality;
        git pull;
        popd;
      else
        git clone https://github.com/OSVR/libfunctionality.git;
      fi;
      if [ -d OSVR-Core ]; then
        pushd OSVR-Core;
        git pull;
        popd;
      else
        git clone https://github.com/OSVR/OSVR-Core.git;
      fi;
      popd;
    fi"
install:
  - "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew uninstall json-c; fi"
  - "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew install jsoncpp --HEAD; fi"
  - "if [ $TRAVIS_OS_NAME = 'osx' ]; then brew install osvr-core --HEAD; fi"
  - "if [ $TRAVIS_OS_NAME = 'linux' ]; then
      if [ $CONFIG = 'Release' ]; then
        pushd $HOME/deps-release;
      else
        pushd $HOME/deps-debug;
      fi;
      mkdir -p jsoncpp/build;
      pushd jsoncpp/build;
      cmake .. -DCMAKE_INSTALL_PREFIX=$INSTPRF -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=ON -DJSONCPP_WITH_CMAKE_PACKAGE=on -DCMAKE_BUILD_TYPE=${CONFIG};
      make -j2 install;
      popd;
      mkdir -p libfunctionality/build;
      pushd libfunctionality/build;
      cmake .. -DCMAKE_INSTALL_PREFIX=$INSTPRF -DCMAKE_BUILD_TYPE=${CONFIG};
      make -j2 install;
      popd;
      mkdir -p OSVR-Core/build;
      pushd OSVR-Core/build;
      git submodule update --init --recursive;
      cmake .. -DCMAKE_INSTALL_PREFIX=$INSTPRF -DCMAKE_BUILD_TYPE=${CONFIG};
      make -j2 install;
      popd;
      popd;
    fi"
script:
  - git submodule update --init --recursive;
  - mkdir build;
  - cd build;
  - if [ $TRAVIS_OS_NAME = 'osx' ]; then cmake .. -DCMAKE_BUILD_TYPE=${CONFIG} -DCMAKE_OSX_ARCHITECTURES=x86_64; fi
  - if [ $TRAVIS_OS_NAME = 'linux' ]; then cmake .. -DCMAKE_BUILD_TYPE=${CONFIG} -DCMAKE_PREFIX_PATH=$INSTPRF; fi
  - make all -j2
# TODO need to sort out false-failures due to container/platform issues.
#  - "ctest -V"
sudo: false
addons:
  apt:
    sources:
    - boost-latest
    - george-edison55-precise-backports
    - ubuntu-toolchain-r-test
    - llvm-toolchain-precise-3.7
    packages:
    - libusb-1.0-0-dev
    - libboost-thread1.55-dev
    - libboost-system1.55-dev
    - libboost-date-time1.55-dev
    - libboost-chrono1.55-dev
    - libboost-program-options1.55-dev
    - libboost-filesystem1.55-dev
    - libopencv-dev
    - libusb-1.0-0-dev
    - cmake-data
    - cmake
    - gcc-5
    - g++-5
